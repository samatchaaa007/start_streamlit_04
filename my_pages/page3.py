import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
import time
import numpy as np

#st.set_page_config(layout="wide")

def title():
    st.markdown("""
        <style>
            h1 {
                font-size: 20px;
                color: #78BE20;
                font-weight: bold;
            }
        </style>
    """, unsafe_allow_html=True)

def show():
    title()
    st.h1("üìà Dashboard ‡∏´‡∏ô‡πâ‡∏≤ 3: ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡πÄ‡∏ä‡∏¥‡∏á‡∏•‡∏∂‡∏Å")

    tab1, tab2, tab3, tab4, tab5 = st.tabs([
        "üìä Summary Table", "üìâ Line Chart", "üìå KPI Dashboard", "üìé Heatmap", "üß™ Interactive"
    ])

    # ---------------------------------------
    # ‚úÖ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏Å (‡πÉ‡∏ä‡πâ‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏±‡∏ô‡∏ó‡∏∏‡∏Å Tab)
    # ---------------------------------------
    df_main = pd.DataFrame({
        "‡πÄ‡∏î‡∏∑‡∏≠‡∏ô": ["‡∏°.‡∏Ñ.", "‡∏Å.‡∏û.", "‡∏°‡∏µ.‡∏Ñ.", "‡πÄ‡∏°.‡∏¢.", "‡∏û.‡∏Ñ.", "‡∏°‡∏¥.‡∏¢."],
        "‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢ (‡∏ö‡∏≤‡∏ó)": [120000, 135000, 99000, 150000, 170000, 160000],
        "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤": [300, 340, 280, 360, 390, 370],
        "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏∂‡∏á‡∏û‡∏≠‡πÉ‡∏à (%)": [85, 88, 82, 91, 93, 92]
    })

    df_main["‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà"] = pd.date_range(start="2024-01-01", periods=6, freq='M')

    # ---------------------------------------
    with tab1:
        st.subheader("üìä ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏™‡∏£‡∏∏‡∏õ‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢")

        st.dataframe(
            df_main.style.format({
                "‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢ (‡∏ö‡∏≤‡∏ó)": "{:,.0f}",
                "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤": "{:,.0f}",
                "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏∂‡∏á‡∏û‡∏≠‡πÉ‡∏à (%)": "{:,.0f}"
            }).highlight_max(axis=0, color='lightgreen'),
            use_container_width=True
        )

        col1, col2 = st.columns(2)
        with col1:
            fig = px.bar(df_main, x="‡πÄ‡∏î‡∏∑‡∏≠‡∏ô", y="‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢ (‡∏ö‡∏≤‡∏ó)", text="‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢ (‡∏ö‡∏≤‡∏ó)",
                         color="‡πÄ‡∏î‡∏∑‡∏≠‡∏ô", title="‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô",
                         color_discrete_sequence=px.colors.qualitative.Set3)
            fig.update_layout(title_x=0.5)
            st.plotly_chart(fig, use_container_width=True)

        with col2:
            fig = px.pie(df_main, names="‡πÄ‡∏î‡∏∑‡∏≠‡∏ô", values="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤",
                         title="‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÄ‡∏î‡∏∑‡∏≠‡∏ô", hole=0.4)
            st.plotly_chart(fig, use_container_width=True)

    # ---------------------------------------
    with tab2:
        st.subheader("üìâ ‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏∂‡∏á‡∏û‡∏≠‡πÉ‡∏à")
        fig = go.Figure()
        fig.add_trace(go.Scatter(x=df_main["‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà"], y=df_main["‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢ (‡∏ö‡∏≤‡∏ó)"],
                                 mode='lines+markers', name='‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢'))
        fig.add_trace(go.Scatter(x=df_main["‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà"], y=df_main["‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏∂‡∏á‡∏û‡∏≠‡πÉ‡∏à (%)"] * 1000,
                                 mode='lines+markers', name='‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏∂‡∏á‡∏û‡∏≠‡πÉ‡∏à (x1000)', yaxis='y2'))

        fig.update_layout(
            title="‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏∂‡∏á‡∏û‡∏≠‡πÉ‡∏à",
            xaxis_title="‡πÄ‡∏î‡∏∑‡∏≠‡∏ô",
            yaxis=dict(title='‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢'),
            yaxis2=dict(title='‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏∂‡∏á‡∏û‡∏≠‡πÉ‡∏à', overlaying='y', side='right'),
            title_x=0.5
        )
        st.plotly_chart(fig, use_container_width=True)

    # ---------------------------------------
    with tab3:
        st.subheader("üìå KPI Dashboard")

        total_sales = df_main["‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢ (‡∏ö‡∏≤‡∏ó)"].sum()
        new_customers = df_main["‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤"].sum()
        avg_satisfaction = df_main["‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏∂‡∏á‡∏û‡∏≠‡πÉ‡∏à (%)"].mean()

        col1, col2, col3 = st.columns(3)

        def kpi_card(col, value, label, color):
            col.metric(label=label, value=f"{value:,.0f}")
            col.markdown(f"<div style='height:5px;background-color:{color};border-radius:4px;'></div>", unsafe_allow_html=True)

        kpi_card(col1, total_sales, "‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏£‡∏ß‡∏°", "#4CAF50")
        kpi_card(col2, new_customers, "‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", "#2196F3")
        kpi_card(col3, avg_satisfaction, "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏∂‡∏á‡∏û‡∏≠‡πÉ‡∏à‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ (%)", "#FFC107")

        st.markdown("---")
        st.markdown("### üéØ ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏∂‡∏á‡∏û‡∏≠‡πÉ‡∏à")
        st.bar_chart(df_main.set_index("‡πÄ‡∏î‡∏∑‡∏≠‡∏ô")["‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏∂‡∏á‡∏û‡∏≠‡πÉ‡∏à (%)"])

    # ---------------------------------------
    with tab4:
        st.subheader("üìé Heatmap: ‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô")

        days = ["‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå", "‡∏≠‡∏±‡∏á‡∏Ñ‡∏≤‡∏£", "‡∏û‡∏∏‡∏ò", "‡∏û‡∏§‡∏´‡∏±‡∏™", "‡∏®‡∏∏‡∏Å‡∏£‡πå", "‡πÄ‡∏™‡∏≤‡∏£‡πå", "‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå"]
        weeks = ["‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡∏ó‡∏µ‡πà 1", "‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡∏ó‡∏µ‡πà 2", "‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡∏ó‡∏µ‡πà 3", "‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡∏ó‡∏µ‡πà 4"]
        z_data = np.random.randint(50, 200, size=(len(weeks), len(days)))

        fig = go.Figure(data=go.Heatmap(
            z=z_data,
            x=days,
            y=weeks,
            colorscale='YlGnBu'))

        fig.update_layout(title='Heatmap ‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå', title_x=0.5)
        st.plotly_chart(fig, use_container_width=True)

    # ---------------------------------------
    with tab5:
        st.subheader("üß™ ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏•‡∏π‡∏Å‡πÄ‡∏•‡πà‡∏ô‡∏û‡∏¥‡πÄ‡∏®‡∏©")

        def stream_data():
            _LOREM_IPSUM = """
            Lorem ipsum dolor sit amet, **consectetur adipiscing** elit, sed do eiusmod tempor
            incididunt ut labore et dolore magna aliqua.
            """
            for word in _LOREM_IPSUM.split():
                yield word + " "
                time.sleep(0.03)
            yield pd.DataFrame(np.random.randn(5, 10), columns=list("abcdefghij"))

        if st.button("‡πÄ‡∏£‡∏¥‡πà‡∏° Stream ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•!"):
            st.write_stream(stream_data)

# ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
show()
