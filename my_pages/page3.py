import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
import time
import numpy as np


def show():
    st.write("### üìà Dashboard ‡∏´‡∏ô‡πâ‡∏≤ 3")
    st.write("‡πÄ‡∏ô‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ä‡∏¥‡∏á‡∏•‡∏∂‡∏Å‡∏î‡πâ‡∏ß‡∏¢ Table + Chart ‡πÅ‡∏ö‡∏ö‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏° ‚ú®")

    tab1, tab2, tab3, tab4 ,tab5 = st.tabs([
        "üìä Summary Table", "üìâ Line Chart", "üìå KPI Dashboard", "üìé Heatmap" , "Test"
    ])

    with tab1:
        st.subheader("üìä ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏™‡∏£‡∏∏‡∏õ‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢")
        data = {
            "‡πÄ‡∏î‡∏∑‡∏≠‡∏ô": ["‡∏°.‡∏Ñ.", "‡∏Å.‡∏û.", "‡∏°‡∏µ.‡∏Ñ.", "‡πÄ‡∏°.‡∏¢.", "‡∏û.‡∏Ñ.", "‡∏°‡∏¥.‡∏¢."],
            "‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢ (‡∏ö‡∏≤‡∏ó)": [120000, 135000, 99000, 150000, 170000, 160000],
            "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤": [300, 340, 280, 360, 390, 370]
        }
        df = pd.DataFrame(data)

        st.dataframe(
            df.style.format({
                "‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢ (‡∏ö‡∏≤‡∏ó)": "{:,.0f}",
                "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤": "{:,.0f}"
            }).highlight_max(axis=0, color='lightgreen'),
            use_container_width=True
        )

        fig = px.bar(df, x="‡πÄ‡∏î‡∏∑‡∏≠‡∏ô", y="‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢ (‡∏ö‡∏≤‡∏ó)", text="‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢ (‡∏ö‡∏≤‡∏ó)",
                     color="‡πÄ‡∏î‡∏∑‡∏≠‡∏ô", title="‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô",
                     color_discrete_sequence=px.colors.qualitative.Set3)
        fig.update_layout(title_x=0.5)
        st.plotly_chart(fig, use_container_width=True)

    with tab2:
        st.subheader("üìâ ‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢")
        df = pd.DataFrame({
            "‡πÄ‡∏î‡∏∑‡∏≠‡∏ô": pd.date_range(start="2024-01-01", periods=6, freq='M'),
            "‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢": [120, 135, 99, 150, 170, 160]
        })

        fig = px.line(df, x="‡πÄ‡∏î‡∏∑‡∏≠‡∏ô", y="‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢", markers=True,
                      title="‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô")
        fig.update_layout(title_x=0.5)
        st.plotly_chart(fig, use_container_width=True)

    with tab3:
        st.subheader("üìå KPI Dashboard")

        col1, col2, col3 = st.columns(3)

        def kpi_card(col, value, label, color):
            col.metric(label=label, value=f"{value:,}", delta=None)
            col.markdown(f"<div style='height:5px;background-color:{color};border-radius:4px;'></div>", unsafe_allow_html=True)

        kpi_card(col1, 480000, "‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏™‡∏∞‡∏™‡∏°", "#4CAF50")
        kpi_card(col2, 2050, "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà", "#2196F3")
        kpi_card(col3, 92, "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏∂‡∏á‡∏û‡∏≠‡πÉ‡∏à (%)", "#FF9800")

    with tab4:
        st.subheader("üìé Heatmap: ‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô")

        days = ["‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå", "‡∏≠‡∏±‡∏á‡∏Ñ‡∏≤‡∏£", "‡∏û‡∏∏‡∏ò", "‡∏û‡∏§‡∏´‡∏±‡∏™", "‡∏®‡∏∏‡∏Å‡∏£‡πå", "‡πÄ‡∏™‡∏≤‡∏£‡πå", "‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå"]
        weeks = ["‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡∏ó‡∏µ‡πà 1", "‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡∏ó‡∏µ‡πà 2", "‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡∏ó‡∏µ‡πà 3", "‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡∏ó‡∏µ‡πà 4"]
        import numpy as np
        z_data = np.random.randint(50, 200, size=(len(weeks), len(days)))

        fig = go.Figure(data=go.Heatmap(
            z=z_data,
            x=days,
            y=weeks,
            colorscale='YlGnBu'))

        fig.update_layout(title='Heatmap ‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå', title_x=0.5)
        st.plotly_chart(fig, use_container_width=True)

    with tab5 :
        

        _LOREM_IPSUM = """
        Lorem ipsum dolor sit amet, **consectetur adipiscing** elit, sed do eiusmod tempor
        incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis
        nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.
        """
        _LOREM_IPSUM2 = "CHAEIEIEIEIEIEIEIEIEIEIEI"

        def stream_data():
            for word in _LOREM_IPSUM.split(" "):
                yield word + " "
                time.sleep(0.02)

            yield pd.DataFrame(
                np.random.randn(5, 10),
                columns=["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"],
            )

            for word in _LOREM_IPSUM2.split(" "):
                yield word + " "
                time.sleep(0.02)


        if st.button("Stream data"):
            st.write_stream(stream_data)