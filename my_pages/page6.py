import streamlit as st
import pandas as pd
import os

def show():
    st.title("üìú Log Viewer")

    log_path = "user_login_log.csv"

    if os.path.exists(log_path):
        try:
            # ‚úÖ ‡πÉ‡∏ä‡πâ on_bad_lines='skip' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ç‡πâ‡∏≤‡∏°‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå
            df = pd.read_csv(log_path, on_bad_lines='skip')

            st.markdown("## üìÇÔ∏è ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Log ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î")
            st.dataframe(df.sort_values(by='timestamp', ascending=False), use_container_width=True)

            # ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á timestamp ‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ
            df['timestamp'] = pd.to_datetime(df['timestamp'], errors='coerce')

            if 'username' in df.columns:
                st.markdown("## üìä ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ï‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ")
                count_df = df['username'].value_counts().reset_index()
                count_df.columns = ['username', 'login_count']
                st.bar_chart(count_df.set_index('username'))

            if 'timestamp' in df.columns:
                st.markdown("## üìà Timeline ‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô")
                timeline = df.groupby(df['timestamp'].dt.date).count()['username']
                st.line_chart(timeline)

            if 'event' in df.columns:
                st.markdown("## üîÑ ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó Event ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô")
                event_df = df['event'].value_counts().reset_index()
                event_df.columns = ['event', 'count']
                st.bar_chart(event_df.set_index('event'))

            if 'browser' in df.columns:
                st.markdown("## üåê Browser ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ")
                browser_df = df['browser'].value_counts().reset_index()
                browser_df.columns = ['browser', 'count']
                st.bar_chart(browser_df.set_index('browser'))

            if 'page' in df.columns:
                st.markdown("## üìÑ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏´‡∏ô‡πâ‡∏≤")
                page_df = df['page'].value_counts().reset_index()
                page_df.columns = ['page', 'count']
                st.bar_chart(page_df.set_index('page'))

            if 'ip' in df.columns:
                st.markdown("## üåç IP Address ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ö‡πà‡∏≠‡∏¢")
                ip_df = df['ip'].value_counts().reset_index()
                ip_df.columns = ['ip', 'count']
                st.bar_chart(ip_df.set_index('ip'))

            st.markdown("## üìÖ ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå Log")
            st.download_button(
                label="üìÖ ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏õ‡πá‡∏ô CSV",
                data=df.to_csv(index=False),
                file_name="user_login_log.csv",
                mime="text/csv"
            )

        except Exception as e:
            st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô log: {e}")
    else:
        st.warning("‚ö†Ô∏è ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ log ‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö")